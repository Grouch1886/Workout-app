{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\workout-app\\\\src\\\\components\\\\stopwatch\\\\StopWatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport './stopwatch.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StopWatch = () => {\n  _s();\n\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const countRef = useRef(null); // Start handle func\n\n  const handleStart = () => {\n    //Start logic here. The main job of this function is to incrementing the counter until it stops (pause/reset).\n    // We will use setInterval method. It takes two parameters, A callback and time in milliseconds\n    // State: isactive & ispaused are true\n    setIsActive(true);\n    setIsPaused(true);\n    countRef.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  }; // Pause handle func\n\n\n  const handlePause = () => {\n    // Use clearInterval to stop calling setInterval. clearInterval needs one parameter, so we'll pass the countRef.current here\n    // Change IsPaused state to from true to false.\n    clearInterval(countRef.current);\n    setIsPaused(false);\n  }; // Resume handle func\n\n\n  const handleResume = () => {\n    // To stop the the timer when we press resume, change isPaused state from false to true\n    setIsPaused(true);\n    countRef.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  }; // Handle reset func\n\n\n  const handleReset = () => {\n    // The logic of this function is when the user click on this button, the stopwatch will reset everything to its intial values. \n    clearInterval(countRef.current);\n    setIsActive(false);\n    setIsPaused(false);\n    setTimer(0);\n  }; // Formatting the timer (displaying 00:00:00 -> hours:mintues:seconds)\n\n\n  const formatTime = () => {\n    const getSeconds = `0${timer % 60}`.slice(-2);\n    const minutes = `${Math.floor(timer / 60)}`;\n    const getMinutes = `0${minutes % 60}`.slice(-2);\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  };\n  /* return (\r\n      <div className='app'>\r\n          <h3>React Stopwatch {element}</h3>\r\n          <div className='stopwatch-card'>\r\n              <p>{formatTime()}</p>\r\n              <div className='buttons'>\r\n                  {\r\n                      !isActive && !isPaused ? <button onClick={handleStart}>Start</button> : (\r\n                          isPaused ? <button onClick={handlePause}>Pause</button> :\r\n                          <button onClick={handleResume}>Resume</button>\r\n                      )\r\n                  }\r\n                  <button onClick={handleReset}>Reset</button>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  ) */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"timer\",\n        children: formatTime()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [!isActive && !isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 50\n        }, this) : isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePause,\n          children: \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 40\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResume,\n          children: \"Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StopWatch, \"gTRYwPZ79cucuHXr84U+wX5fxco=\");\n\n_c = StopWatch;\nexport default StopWatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"StopWatch\");","map":{"version":3,"sources":["D:/projects/workout-app/src/components/stopwatch/StopWatch.js"],"names":["React","useRef","useState","StopWatch","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","countRef","handleStart","current","setInterval","handlePause","clearInterval","handleResume","handleReset","formatTime","getSeconds","slice","minutes","Math","floor","getMinutes","getHours"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './stopwatch.css';\r\n\r\n\r\n\r\n\r\nconst StopWatch = () => {\r\n    const [timer, setTimer] = useState(0)\r\n    const [isActive, setIsActive] = useState(false)\r\n    const [isPaused, setIsPaused] = useState(false)\r\n    const countRef = useRef(null)\r\n\r\n    // Start handle func\r\n    const handleStart = () => {\r\n        //Start logic here. The main job of this function is to incrementing the counter until it stops (pause/reset).\r\n        // We will use setInterval method. It takes two parameters, A callback and time in milliseconds\r\n        // State: isactive & ispaused are true\r\n        setIsActive(true)\r\n        setIsPaused(true)\r\n\r\n        countRef.current = setInterval(() => {\r\n            setTimer((timer) => timer + 1)\r\n        }, 1000)\r\n    }\r\n\r\n    // Pause handle func\r\n    const handlePause = () => {\r\n        // Use clearInterval to stop calling setInterval. clearInterval needs one parameter, so we'll pass the countRef.current here\r\n        // Change IsPaused state to from true to false.\r\n        clearInterval(countRef.current)\r\n        setIsPaused(false)\r\n    }\r\n\r\n    // Resume handle func\r\n    const handleResume = () => {\r\n        // To stop the the timer when we press resume, change isPaused state from false to true\r\n        setIsPaused(true)\r\n        countRef.current = setInterval(() => {\r\n            setTimer((timer) => timer +1)\r\n        }, 1000)\r\n    }\r\n\r\n    // Handle reset func\r\n    const handleReset = () => {\r\n        // The logic of this function is when the user click on this button, the stopwatch will reset everything to its intial values. \r\n        clearInterval(countRef.current)\r\n        setIsActive(false)\r\n        setIsPaused(false)\r\n        setTimer(0)\r\n    }\r\n\r\n\r\n    // Formatting the timer (displaying 00:00:00 -> hours:mintues:seconds)\r\n    const formatTime = () => {\r\n        const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n        const minutes = `${Math.floor(timer / 60)}`\r\n        const getMinutes = `0${minutes % 60}`.slice(-2)\r\n        const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n\r\n        return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n    }\r\n\r\n    /* return (\r\n        <div className='app'>\r\n            <h3>React Stopwatch {element}</h3>\r\n            <div className='stopwatch-card'>\r\n                <p>{formatTime()}</p>\r\n                <div className='buttons'>\r\n                    {\r\n                        !isActive && !isPaused ? <button onClick={handleStart}>Start</button> : (\r\n                            isPaused ? <button onClick={handlePause}>Pause</button> :\r\n                            <button onClick={handleResume}>Resume</button>\r\n                        )\r\n                    }\r\n                    <button onClick={handleReset}>Reset</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) */\r\n\r\n    return (\r\n        <div>\r\n            <div className='stopwatch-card'>\r\n                <p className='timer'>{formatTime()}</p>\r\n                <div className='buttons'>\r\n                    {\r\n                        !isActive && !isPaused ? <button onClick={handleStart}>Start</button> : (\r\n                            isPaused ? <button onClick={handlePause}>Pause</button> :\r\n                            <button onClick={handleResume}>Resume</button>\r\n                        )\r\n                    }\r\n                    <button onClick={handleReset}>Reset</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StopWatch;"]},"metadata":{},"sourceType":"module"}